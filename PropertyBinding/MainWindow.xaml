<!--vgl. CodeBehind und DoubleToBrushConverter.cs-->
<Window x:Class="PropertyBinding.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PropertyBinding"
        mc:Ignorable="d"
        Title="MainWindow" Height="371" Width="470">

    <!--Durch Bindings können Properties von XAML-Objekten mit anderen XAML-Properties oder Daten verknüpft werden.
    Bindings werden immer in der Ziel-Property definiert.-->
    <!--Die Binding-Property ElementName definiert das Quellen-Element in dem aktuellen XAML.Dokument.
    Path definiert die Quellen-Property des Quellen-Elements-->
    <StackPanel Margin="5">
        <StackPanel Orientation="Horizontal">
            <Slider x:Name="Sdr_Eins"
                    Width="300"
                    Value="5"/>
            <TextBox Width="80">
                <TextBox.Text>
                    <!--Mittels der Mode-Property von Bindings kann der Bindungs-Weg definiert werden
                        Mode=TwoWay stellt eine Bindung in beide Richtungen bereit-->
                    <!--Mittels der UpdateSourceTrigger-Property kann definiert werden, wann die GUI aktualisiert wird.
                        UST=LostFocus aktualisiert das Element, wenn der Focus in dem Fenster auf ein anderes Element gelegt wird-->
                    <Binding ElementName="Sdr_Eins" Path="Value" Mode="TwoWay" UpdateSourceTrigger="LostFocus"/>
                </TextBox.Text>
            </TextBox>
        </StackPanel>

        <StackPanel Orientation="Horizontal">
            <Slider x:Name="Sdr_Zwei"
                    Width="300"
                    Value="5"/>
            <!--Anstelle einer Auslagerung der zu Bindenden Eigenschaft und der Erstellung eines Binding-Tags (s.o.), kann
                auch eine verkürzte Schreibeweise names Markup-Extension (s.u.) verwendet werden-->
            <!--Mode=OneWay stellt die Bindung für die Richtung Quelle->Ziel her-->
            <TextBox Width="80" Text="{Binding ElementName=Sdr_Zwei, Path=Value, Mode=OneWay}"/>
        </StackPanel>

        <StackPanel Orientation="Horizontal">
            <Slider x:Name="Sdr_Drei"
                    Width="300"
                    Value="5"/>
            <!--Mode=OneWayToSource stellt die Bindung für die Richtung Ziel->Quelle her-->
            <!--UST=PropertyChanged aktualisiert das Element, wenn die Quell-Property geändert wird-->
            <!--Delay definiert den Millisekundenabstand, bis die Bindung in Richtung Source getriggert wird-->
            <TextBox Width="80" 
                     Text="{Binding ElementName=Sdr_Drei, Path=Value, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged, Delay=1000}"/>
        </StackPanel>

        <StackPanel Orientation="Horizontal">
            <Slider x:Name="Sdr_Vier"
                    Width="300"
                    Value="5"/>
            <!--UST=Explicit erfordert die Aktualisierung über den CodeBehind und ein Event, bei welchem diese Aktualisierung durchgeführt wird (hier das Click-event des Buttons)-->
            <!--Der FallBackValue wird aufgerufen, wenn eine Bindung nicht zustande kommt. Der TargetNullValue wird aufgerufen, wenn der Wert NULL über die Bindung an das Target gesendet wird-->
            <TextBox x:Name="Tbx_Vier" Width="80" 
                     Text="{Binding ElementName=Sdr_Vier, Path=Value, Mode=OneWayToSource, UpdateSourceTrigger=Explicit, FallbackValue='Didnt work', TargetNullValue=NULL}"/>
            <Button Content="Aktualisieren" Click="Button_Click"/>
        </StackPanel>

        <StackPanel>

            <!--ValueConverter-->

            <!--Bsp für integrierten BooleanToVisibilityConverter-->
            <StackPanel Orientation="Horizontal">
                <CheckBox x:Name="Cbx_Visibility" Content="IsVisible?" Margin="5"/>
                <TextBlock Text="HALLO" Margin="5">
                    <TextBlock.Visibility>
                        <Binding ElementName="Cbx_Visibility" Path="IsChecked">
                            <Binding.Converter>
                                <BooleanToVisibilityConverter/>
                            </Binding.Converter>
                        </Binding>
                    </TextBlock.Visibility>
                </TextBlock>
            </StackPanel>

            <!--Bsp für selbstgeschriebenen Converter-->
            <Slider x:Name="Sdr_Rot" Minimum="0" Maximum="255" Value="0"/>
            <Rectangle Width="100" Height="100">
                <!--Anstelle direkt in dem Binding-Objekt instanziert zu werden, kann dieser auch in eine Ressource gelegt werden. (vgl. Ressourcen)-->
                <Rectangle.Fill>
                    <Binding ElementName="Sdr_Rot" Path="Value">
                        <Binding.Converter>
                            <!--Wenn eine Bindung an eine Property durchgeführt werden soll, welche einen anderen Datentyp liefert,
                                als ihn die Ziel-Property erwartet (oder ein Wert vor der Übergabe manipuliert werden soll), muss in den 
                                Ressourcen ein Converter eingebunden werden, welcher die Typumwandlung übernimmt-->
                            <local:DoubleToBrushConverter/>
                        </Binding.Converter>
                    </Binding>
                </Rectangle.Fill>
            </Rectangle>
        </StackPanel>

    </StackPanel>
</Window>